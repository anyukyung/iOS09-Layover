//
//  ProfileWorker.swift
//  Layover
//
//  Created by 김인환 on 12/5/23.
//  Copyright (c) 2023 CodeBomber. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import OSLog

protocol ProfileWorkerProtocol {
    func fetchProfile(by id: Int?) async -> Member?
    func fetchPosts(at page: Int, of id: Int?) async -> [Post]?
    func fetchImageData(with url: URL) async -> Data?
}

class ProfileWorker: ProfileWorkerProtocol {

    // MARK: - Properties

    private let provider: ProviderType
    private let userEndPointFactory: UserEndPointFactory

    // MARK: - Intializer

    init(provider: ProviderType = Provider(),
         userEndPointFactory: UserEndPointFactory = DefaultUserEndPointFactory()) {
        self.provider = provider
        self.userEndPointFactory = userEndPointFactory
    }

    // MARK: - Methods

    func fetchProfile(by id: Int?) async -> Member? {
        let endPoint = userEndPointFactory.makeUserInformationEndPoint(with: id)

        do {
            let response = try await provider.request(with: endPoint)
            return response.data?.toDomain()
        } catch {
            os_log(.error, log: .data, "Error: %s", error.localizedDescription)
            return nil
        }
    }

    func fetchPosts(at page: Int, of id: Int?) async -> [Post]? {
        let endPoint = userEndPointFactory.makeUserPostsEndPoint(at: page, of: id)

        do {
            let response = try await provider.request(with: endPoint)
            return response.data?.map { $0.toDomain() }
        } catch {
            os_log(.error, log: .data, "Error: %s", error.localizedDescription)
            return nil
        }
    }

    func fetchImageData(with url: URL) async -> Data? {
        do {
            return try await provider.request(url: url)
        } catch {
            os_log(.error, log: .data, "Error: %s", error.localizedDescription)
            return nil
        }
    }
}
